{
  "clog": {
    "prefix": "clog",
    "body": "console.log('$0 => ', $0)",
    "description": "控制台输出"
  },
  "ConsoleAssert": {
    "prefix": "ca",
    "body": "console.assert(${1:condition}, ${2:message})",
    "description": "Writes an error message to the console if the assertion is false. If the assertion is true, nothing happens."
  },
  "ConsoleClear": {
    "prefix": "ccl",
    "body": "console.clear()",
    "description": "Clears the console."
  },
  "ConsoleCount": {
    "prefix": "cc",
    "body": "console.count(${1:label})",
    "description": "Logs the number of times that this particular call to count() has been called. This function takes an optional argument label."
  },
  "ConsoleCountReset": {
    "prefix": "ccr",
    "body": "console.countReset(${1:label})",
    "description": "Resets the counter. This function takes an optional argument label."
  },
  "ConsoleDebug": {
    "prefix": "cdb",
    "body": "console.debug(${1:message})",
    "description": "The Console method debug() outputs a message to the web console at the \"debug\" log level. The message is only displayed to the user if the console is configured to display debug output."
  },
  "ConsoleDir": {
    "prefix": "cd",
    "body": "console.dir(${1:value})",
    "description": "The Console method dir() displays an interactive list of the properties of the specified JavaScript object. The output is presented as a hierarchical listing with disclosure triangles that let you see the contents of child objects."
  },
  "ConsoleDirXML": {
    "prefix": "cdx",
    "body": "console.dirxml(${1:object})",
    "description": "Displays an interactive tree of the descendant elements of the specified XML/HTML element. If it is not possible to display as an element the JavaScript Object view is shown instead. The output is presented as a hierarchical listing of expandable nodes that let you see the contents of child nodes."
  },
  "ConsoleError": {
    "prefix": "ce",
    "body": "console.error(${1:message})",
    "description": "Outputs an error message to the Web Console."
  },
  "ConsoleGroup": {
    "prefix": "cg",
    "body": "console.group(${1:groupTitle})",
    "description": "Creates a new inline group in the Web Console log. This indents following console messages by an additional level, until console.groupEnd() is called."
  },
  "ConsoleGroupCollapsed": {
    "prefix": "cgc",
    "body": "console.groupCollapsed(${1:groupTitle})",
    "description": "Creates a new inline group in the Web Console. Unlike console.group(), however, the new group is created collapsed. The user will need to use the disclosure button next to it to expand it, revealing the entries created in the group."
  },
  "ConsoleGroupEnd": {
    "prefix": "cge",
    "body": "console.groupEnd()",
    "description": "Exits the current inline group in the Web Console. See Using groups in the console in the console documentation for details and examples."
  },
  "ConsoleInfo": {
    "prefix": "ci",
    "body": "console.info(${1:message})",
    "description": "Outputs an informational message to the Web Console. In Firefox and Chrome, a small \"i\" icon is displayed next to these items in the Web Console's log."
  },
  "ConsoleLog": {
    "prefix": "cl",
    "body": "console.log(${1:message})",
    "description": "The Console method log() outputs a message to the web console. The message may be a single string (with optional substitution values), or it may be any one or more JavaScript objects."
  },
  "ConsoleTable": {
    "prefix": "ctb",
    "body": "console.table(${1:tabularData})",
    "description": "Displays tabular data as a table."
  },
  "ConsoleTime": {
    "prefix": "ct",
    "body": "console.time(${1:label})",
    "description": "Starts a timer you can use to track how long an operation takes. You give each timer a unique name, and may have up to 10,000 timers running on a given page. When you call console.timeEnd() with the same name, the browser will output the time, in milliseconds, that elapsed since the timer was started."
  },
  "ConsoleTimeEnd": {
    "prefix": "cte",
    "body": "console.timeEnd(${1:label})",
    "description": "Stops a timer that was previously started by calling \"console.time()\"."
  },
  "ConsoleTrace": {
    "prefix": "ctr",
    "body": "console.trace(${1:message})",
    "description": "The console interface's trace() method outputs a stack trace to the Web Console."
  },
  "ConsoleWarn": {
    "prefix": "cw",
    "body": "console.warn(${1:message})",
    "description": "Outputs a warning message to the Web Console."
  },
  "Concat": {
    "prefix": ".concat",
    "body": ".concat(${1:items})",
    "description": "The \"arrayInstance.concat()\" method s used to merge two or more arrays. This method does not change the existing arrays, but instead returns a new array.\n\nThe \"stringInstance.concat()\" method concatenates the string arguments to the calling string and returns a new string."
  },
  "Includes": {
    "prefix": ".includes",
    "body": ".includes(${3:searchElement}${1:, ${2:fromIndex}})",
    "description": "The \"arrayInstance.includes()\" method determines whether an array includes a certain value among its entries, returning true or false as appropriate.\n\nThe \"stringInstance.includes()\" method determines whether one string may be found within another string, returning true or false as appropriate."
  },
  "IndexOf": {
    "prefix": ".indexOf",
    "body": ".indexOf(${3:searchElement}${1:, ${2:fromIndex}})",
    "description": "The \"arrayInstance.indexOf()\" method returns the first index at which a given element can be found in the array, or -1 if it is not present.\n\nThe \"stringInstance.indexOf()\" method returns the index within the calling String object of the first occurrence of the specified value, starting the search at fromIndex. Returns -1 if the value is not found."
  },
  "LastIndexOf": {
    "prefix": ".lastIndexOf",
    "body": ".lastIndexOf(${3:searchElement}${1:, ${2:fromIndex}})",
    "description": "The \"arrayInstance.lastIndexOf()\" method returns the last index at which a given element can be found in the array, or -1 if it is not present. The array is searched backwards, starting at fromIndex.\n\nThe \"stringInstance.lastIndexOf()\" method returns the index within the calling String object of the last occurrence of the specified value, searching backwards from fromIndex. Returns -1 if the value is not found."
  },
  "Slice": {
    "prefix": ".slice",
    "body": ".slice(${1:${2:start}${3:, ${0:end}}})",
    "description": "The \"arrayInstance.slice()\" method returns a shallow copy of a portion of an array into a new array object selected from begin to end (end not included) where begin and end represent the index of items in that array. The original array will not be modified.\n\nThe \"stringInstance.slice()\" method extracts a section of a string and returns it as a new string, without modifying the original string."
  },
  "ToString": {
    "prefix": ".toString",
    "body": ".toString(${1:radix})",
    "description": "The \"numberInstance.toString()\" method returns a string representing the specified Number object.\nThe \"functionInstance.toString()\" method returns a string representing the source code of the function.\nThe \"dateInstance.toString()\" method returns a string representing the specified Date object.\nThe \"regExpInstance.toString()\" method returns a string representing the regular expression."
  },
  "ValueOf": {
    "prefix": ".valueOf",
    "body": ".valueOf()",
    "description": "The \"arrayInstance.valueOf()\" method returns the primitive value of the specified object.\n\nThe \"stringInstance.valueOf()\" method returns the primitive value of a String object.\n\nThe \"numberInstance.valueOf()\" method returns the wrapped primitive value of a Number object.\nThe \"dateInstance.valueOf()\" method returns the primitive value of a Date object."
  },
  "ArrayFrom": {
    "prefix": "Af",
    "body": "Array.from(${1:arrayLike}${2:, ${0:mapFn}})",
    "description": "The \"Array.from()\" method creates a new, shallow-copied Array instance from an array-like or iterable object."
  },
  "ArrayIsArray": {
    "prefix": "Aia",
    "body": "Array.isArray(${1:value})",
    "description": "The \"Array.isArray()\" method determines whether the passed value is an Array."
  },
  "ArrayOf": {
    "prefix": "Ao",
    "body": "Array.of(${1:items})",
    "description": "The \"Array.of()\" method creates a new Array instance from a variable number of arguments, regardless of number or type of the arguments."
  },
  "ArrayCopyWithin": {
    "prefix": ".copyWithin",
    "body": ".copyWithin(${1:target}${2:, ${3:start}${4:, ${0:end}}})",
    "description": "The \"copyWithin()\" method shallow copies part of an array to another location in the same array and returns it without modifying its length."
  },
  "ArrayEntries": {
    "prefix": ".entries",
    "body": ".entries()",
    "description": "The \"entries()\" method returns a new Array Iterator object that contains the key/value pairs for each index in the array."
  },
  "ArrayEvery": {
    "prefix": ".every",
    "body": ".every(${1:(${2:value}${3:, ${4:index}${5:, ${6:array}}}) => {$0\\}})",
    "description": "The \"every()\" method tests whether all elements in the array pass the test implemented by the provided function. It returns a Boolean value."
  },
  "ArrayFill": {
    "prefix": ".fill",
    "body": ".fill(${1:target}${2:, ${3:start}${4:, ${0:end}}})",
    "description": "The \"fill()\" method fills (modifies) all the elements of an array from a start index (default zero) to an end index (default array length) with a static value. It returns the modified array."
  },
  "ArrayFilter": {
    "prefix": ".filter",
    "body": ".filter(${1:(${2:value}${3:, ${4:index}${5:, ${6:array}}}) => {$0\\}})",
    "description": "The \"filter()\" method creates a new array with all elements that pass the test implemented by the provided function."
  },
  "ArrayFind": {
    "prefix": ".find",
    "body": ".find(${1:(${2:value}${3:, ${4:index}${5:, ${6:array}}}) => {$0\\}})",
    "description": "The \"find()\" method returns the value of the first element in the array that satisfies the provided testing function. Otherwise \"undefined\" is returned."
  },
  "ArrayFindIndex": {
    "prefix": ".findIndex",
    "body": ".findIndex(${1:(${2:value}${3:, ${4:index}${5:, ${6:array}}}) => {$0\\}})",
    "description": "The \"findIndex()\" method returns the index of the first element in the array that satisfies the provided testing function. Otherwise, it returns -1, indicating that no element passed the test."
  },
  "ArrayFlat": {
    "prefix": ".flat",
    "body": ".flat(${1:depth})",
    "description": "The \"flat()\" method creates a new array with all sub-array elements concatenated into it recursively up to the specified depth."
  },
  "ArrayFlatMap": {
    "prefix": ".flatMap",
    "body": ".flatMap(${1:(${2:value}${3:, ${4:index}${5:, ${6:array}}}) => {$0\\}})",
    "description": "The \"flatMap()\" method first maps each element using a mapping function, then flattens the result into a new array. It is identical to a map() followed by a flat() of depth 1, but flatMap() is often quite useful, as merging both into one method is slightly more efficient."
  },
  "ArrayForEach": {
    "prefix": ".forEach",
    "body": ".forEach(${1:(${2:value}${3:, ${4:index}${5:, ${6:array}}}) => {$0\\}})",
    "description": "The \"forEach()\" method executes a provided function once for each array element."
  },
  "ArrayJoin": {
    "prefix": ".join",
    "body": ".join(${1:separator})",
    "description": "The \"join()\" method creates and returns a new string by concatenating all of the elements in an array (or an array-like object), separated by commas or a specified separator string. If the array has only one item, then that item will be returned without using the separator."
  },
  "ArrayKeys": {
    "prefix": ".keys",
    "body": ".keys()",
    "description": "The \"keys()\" method returns a new Array Iterator object that contains the keys for each index in the array."
  },
  "ArrayMap": {
    "prefix": ".map",
    "body": ".map(${1:(${2:value}${3:, ${4:index}${5:, ${6:array}}}) => {$0\\}})",
    "description": "The \"map()\" method creates a new array with the results of calling a provided function on every element in the calling array."
  },
  "ArrayPop": {
    "prefix": ".pop",
    "body": ".pop()",
    "description": "The \"pop()\" method removes the last element from an array and returns that element. This method changes the length of the array."
  },
  "ArrayPush": {
    "prefix": ".push",
    "body": ".push(${1:value})",
    "description": "The \"push()\" method removes the last element from an array and returns that element. This method changes the length of the array."
  },
  "ArrayReduce": {
    "prefix": ".reduce",
    "body": ".reduce(${3:(${4:previousValue}${5:, ${6:currentValue}${7:, ${8:currentIndex}${9:, ${10:array}}}}) => {$0\\}}${1:, ${2:initialValue}})",
    "description": "The \"reduce()\" method executes a reducer function (that you provide) on each element of the array, resulting in a single output value."
  },
  "ArrayReduceRight": {
    "prefix": ".reduceRight",
    "body": ".reduceRight(${3:(${4:previousValue}${5:, ${6:currentValue}${7:, ${8:currentIndex}${9:, ${10:array}}}}) => {$0\\}}${1:, ${2:initialValue}})",
    "description": "The \"reduceRight()\" method applies a function against an accumulator and each value of the array (from right-to-left) to reduce it to a single value."
  },
  "ArrayReverse": {
    "prefix": ".reverse",
    "body": ".reverse()",
    "description": "The \"reverse()\" method reverses an array in place. The first array element becomes the last, and the last array element becomes the first."
  },
  "ArrayShift": {
    "prefix": ".shift",
    "body": ".shift()",
    "description": "The \"shift()\" method removes the first element from an array and returns that removed element. This method changes the length of the array."
  },
  "ArraySome": {
    "prefix": ".some",
    "body": ".some(${1:(${2:value}${3:, ${4:index}${5:, ${6:array}}}) => {$0\\}})",
    "description": "The \"some()\" method tests whether at least one element in the array passes the test implemented by the provided function. It returns a Boolean value."
  },
  "ArraySort": {
    "prefix": ".sort",
    "body": ".sort(${1:(${2:a}, ${3:b}) => {$0\\}})",
    "description": "The \"sort()\" method sorts the elements of an array in place and returns the sorted array. The default sort order is built upon converting the elements into strings, then comparing their sequences of UTF-16 code units values."
  },
  "ArrayUnshift": {
    "prefix": ".unshift",
    "body": ".unshift(${0:value})",
    "description": "The \"unshift()\" method adds one or more elements to the beginning of an array and returns the new length of the array."
  },
  "ArrayValues": {
    "prefix": ".values",
    "body": ".values()",
    "description": "The \"values()\" method returns a new Array Iterator object that contains the values for each index in the array."
  },
  "ObjectAssign": {
    "prefix": "Oa",
    "body": "Object.assign(${1:target}${2:, ${0:sources}})",
    "description": "The \"Object.assign()\" method is used to copy the values of all enumerable own properties from one or more source objects to a target object. It will return the target object."
  },
  "ObjectCreate": {
    "prefix": "Oc",
    "body": "Object.create(${1:proto}${2:, {$0\\}})",
    "description": "The \"Object.create()\" method creates a new object, using an existing object as the prototype of the newly created object."
  },
  "ObjectDefineProperties": {
    "prefix": "Odps",
    "body": "Object.defineProperties(${1:obj}, {$0})",
    "description": "The \"Object.defineProperties()\" method creates a new object, using an existing object as the prototype of the newly created object."
  },
  "ObjectDefineProperty": {
    "prefix": "Odp",
    "body": "Object.defineProperty(${1:obj}, ${2:propertyKey}, {$0})",
    "description": "The static method \"Object.defineProperty()\" defines a new property directly on an object, or modifies an existing property on an object, and returns the object."
  },
  "ObjectEntries": {
    "prefix": "Oe",
    "body": "Object.entries(${0:obj})",
    "description": "The \"Object.entries()\" method returns an array of a given object's own enumerable string-keyed property [key, value] pairs, in the same order as that provided by a for...in loop (the difference being that a for-in loop enumerates properties in the prototype chain as well). The order of the array returned by Object.entries() does not depend on how an object is defined. If there is a need for certain ordering then the array should be sorted first like Object.entries(obj).sort((a, b) => b[0].localeCompare(a[0]));."
  },
  "ObjectFreeze": {
    "prefix": "Of",
    "body": "Object.freeze(${0:obj})",
    "description": "The \"Object.freeze()\" method freezes an object. A frozen object can no longer be changed; freezing an object prevents new properties from being added to it, existing properties from being removed, prevents changing the enumerability, configurability, or writability of existing properties, and prevents the values of existing properties from being changed. In addition, freezing an object also prevents its prototype from being changed. freeze() returns the same object that was passed in."
  },
  "ObjectFromEntries": {
    "prefix": "Ofe",
    "body": "Object.fromEntries(${0:entries})",
    "description": "The \"Object.fromEntries()\" method transforms a list of key-value pairs into an object."
  },
  "ObjectGetOwnPropertyDescriptor": {
    "prefix": "Ogopd",
    "body": "Object.getOwnPropertyDescriptor(${1:obj}, ${0:propertyKey})",
    "description": "The \"Object.getOwnPropertyDescriptor()\" method returns a property descriptor for an own property (that is, one directly present on an object and not in the object's prototype chain) of a given object."
  },
  "ObjectGetOwnPropertyDescriptors": {
    "prefix": "Ogopds",
    "body": "Object.getOwnPropertyDescriptor(${0:obj})",
    "description": "The \"Object.getOwnPropertyDescriptors()\" method returns all own property descriptors of a given object."
  },
  "ObjectGetOwnPropertySymbols": {
    "prefix": "Ogops",
    "body": "Object.getOwnPropertySymbols(${0:obj})",
    "description": "The \"Object.getOwnPropertySymbols()\" method returns an array of all symbol properties found directly upon a given object."
  },
  "ObjectGetPrototypeOf": {
    "prefix": "Ogpo",
    "body": "Object.getPrototypeOf(${0:obj})",
    "description": "The \"Object.getPrototypeOf()\" method returns the prototype (i.e. the value of the internal [[Prototype]] property) of the specified object."
  },
  "ObjectIs": {
    "prefix": "Oi",
    "body": "Object.is(${1:value1}, ${0:value2})",
    "description": "The \"Object.is()\" method determines whether two values are the same value."
  },
  "ObjectIsExtensible": {
    "prefix": "Oie",
    "body": "Object.isExtensible(${0:obj})",
    "description": "The \"Object.isExtensible()\" method determines if an object is extensible (whether it can have new properties added to it)."
  },
  "ObjectIsFrozen": {
    "prefix": "Oif",
    "body": "Object.isFrozen(${0:obj})",
    "description": "The \"Object.isFrozen()\" determines if an object is frozen."
  },
  "ObjectIsSealed": {
    "prefix": "Ois",
    "body": "Object.isSealed(${0:obj})",
    "description": "The \"Object.isSealed()\" method determines if an object is sealed."
  },
  "ObjectKeys": {
    "prefix": "Ok",
    "body": "Object.keys(${0:obj})",
    "description": "The \"Object.keys()\" method returns an array of a given object's own property names, in the same order as we get with a normal loop."
  },
  "ObjectPreventExtensions": {
    "prefix": "Ope",
    "body": "Object.preventExtensions(${0:obj})",
    "description": "The \"Object.preventExtensions()\" method prevents new properties from ever being added to an object (i.e. prevents future extensions to the object)."
  },
  "ObjectHasOwnProperty": {
    "prefix": ".hasOwnProperty",
    "body": ".hasOwnProperty(${0:propertyKey})",
    "description": "The \"hasOwnProperty()\" method returns a boolean indicating whether the object has the specified property as its own property (as opposed to inheriting it)."
  },
  "ObjectIsPrototypeOf": {
    "prefix": ".isPrototypeOf",
    "body": ".isPrototypeOf(${0:obj})",
    "description": "The \"isPrototypeOf()\" method checks if an object exists in another object's prototype chain."
  },
  "ObjectPropertyIsEnumerable": {
    "prefix": ".propertyIsEnumerable",
    "body": ".propertyIsEnumerable(${0:propertyKey})",
    "description": "The \"propertyIsEnumerable()\" method returns a Boolean indicating whether the specified property is enumerable."
  },
  "ObjectSeal": {
    "prefix": "Os",
    "body": "Object.seal(${0:obj})",
    "description": "The \"Object.seal()\" method seals an object, preventing new properties from being added to it and marking all existing properties as non-configurable. Values of present properties can still be changed as long as they are writable."
  },
  "ObjectValues": {
    "prefix": "Ov",
    "body": "Object.values(${0:obj})",
    "description": "The \"Object.setPrototypeOf()\" method returns an array of a given object's own enumerable property values, in the same order as that provided by a \"for...in\" loop (the difference being that a for-in loop enumerates properties in the prototype chain as well)."
  },
  "StringFromCharCode": {
    "prefix": "Sfcc",
    "body": "String.fromCharCode(${0:codes})",
    "description": "The static \"String.fromCharCode()\" method returns a string created from the specified sequence of UTF-16 code units."
  },
  "StringFromCodePoint": {
    "prefix": "Sfcp",
    "body": "String.fromCodePoint(${0:codePoints})",
    "description": "The static \"String.fromCodePoint()\" method returns a string created by using the specified sequence of code points."
  },
  "StringCharAt": {
    "prefix": ".charAt",
    "body": ".charAt(${0:index})",
    "description": "The \"String\" object's \"charAt()\" method returns a new string consisting of the single UTF-16 code unit located at the specified offset into the string."
  },
  "StringCharCodeAt": {
    "prefix": ".charCodeAt",
    "body": ".charCodeAt(${0:index})",
    "description": "The \"charCodeAt()\" method returns an integer between 0 and 65535 representing the UTF-16 code unit at the given index."
  },
  "StringCodePointAt": {
    "prefix": ".codePointAt",
    "body": ".codePointAt(${0:index})",
    "description": "The \"codePointAt()\" method returns a non-negative integer that is the Unicode code point value."
  },
  "StringEndsWith": {
    "prefix": ".endsWith",
    "body": ".endsWith(${1:searchString}${2:, ${0:endPosition}})",
    "description": "The \"endsWith()\" method determines whether a string ends with the characters of a specified string, returning \"true\" or \"false\" as appropriate."
  },
  "StringLocaleCompare": {
    "prefix": ".localeCompare",
    "body": ".localeCompare(${1:compareString}${2:, ${3:locales}${4:, {$0\\}}})",
    "description": "The \"localeCompare()\" method returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order."
  },
  "StringMatch": {
    "prefix": ".match",
    "body": ".match(${0:regexp})",
    "description": "The \"match()\" method retrieves the result of matching a string against a regular expression."
  },
  "StringMatchAll": {
    "prefix": ".matchAll",
    "body": ".matchAll(${0:regexp})",
    "description": "The \"matchAll()\" method returns an iterator of all results matching a string against a regular expression, including capturing groups."
  },
  "StringNormalize": {
    "prefix": ".normalize",
    "body": ".normalize(${0:form})",
    "description": "The \"normalize()\" method returns the Unicode Normalization Form of a given string (if the value isn't a string, it will be converted to one first)."
  },
  "StringPadEnd": {
    "prefix": ".padEnd",
    "body": ".padEnd(${1:maxLength}${2:, ${0:fillString}})",
    "description": "The \"padEnd()\" method pads the current string with a given string (repeated, if needed) so that the resulting string reaches a given length. The padding is applied from the end of the current string."
  },
  "StringPadStart": {
    "prefix": ".padStart",
    "body": ".padStart(${1:maxLength}${2:, ${0:fillString}})",
    "description": "The \"padStart()\" method pads the current string with another string (multiple times, if needed) until the resulting string reaches the given length. The padding is applied from the start of the current string."
  },
  "StringRepeat": {
    "prefix": ".repeat",
    "body": ".repeat(${0:count})",
    "description": "The \"repeat()\" method constructs and returns a new string which contains the specified number of copies of the string on which it was called, concatenated together."
  },
  "StringReplace": {
    "prefix": ".replace",
    "body": ".replace(${1:subStringOrRegexp}, ${0:newSubstringOrReplacer})",
    "description": "The \"replace()\" method returns a new string with some or all matches of a pattern replaced by a replacement. The pattern can be a string or a RegExp, and the replacement can be a string or a function to be called for each match. If pattern is a string, only the first occurrence will be replaced."
  },
  "StringSearch": {
    "prefix": ".search",
    "body": ".search(${1:searcher})",
    "description": "The \"search()\" method executes a search for a match between a regular expression and this String object."
  },
  "StringSplit": {
    "prefix": ".split",
    "body": ".split(${1:splitter}${2:, ${0:limit}})",
    "description": "The \"split()\" method splits a String object into an array of strings by separating the string into substrings, using a specified separator string to determine where to make each split."
  },
  "StringStartsWith": {
    "prefix": ".startsWith",
    "body": ".startsWith(${1:searchString}${2:, ${0:position}})",
    "description": "The \"startsWith()\" method determines whether a string begins with the characters of a specified string, returning true or false as appropriate."
  },
  "StringSubstring": {
    "prefix": ".substring",
    "body": ".substring(${1:${2:start}${3:, ${0:end}}})",
    "description": "The \"substring()\" method returns the part of the string between the start and end indexes, or to the end of the string."
  },
  "StringToLocaleLowerCase": {
    "prefix": ".toLocaleLowerCase",
    "body": ".toLocaleLowerCase()",
    "description": "The \"toLocaleLowerCase()\" method returns the calling string value converted to lower case, according to any locale-specific case mappings."
  },
  "StringToLocaleUpperCase": {
    "prefix": ".toLocaleUpperCase",
    "body": ".toLocaleUpperCase()",
    "description": "The \"toLocaleUpperCase()\" method returns the calling string value converted to upper case, according to any locale-specific case mappings."
  },
  "StringToLowerCase": {
    "prefix": ".toLowerCase",
    "body": ".toLowerCase()",
    "description": "The \"toLowerCase()\" method returns the calling string value converted to lower case."
  },
  "StringToUpperCase": {
    "prefix": ".toUpperCase",
    "body": ".toUpperCase()",
    "description": "The \"toUpperCase()\" method returns the calling string value converted to uppercase (the value will be converted to a string if it isn't one)."
  },
  "StringTrim": {
    "prefix": ".trim",
    "body": ".trim()",
    "description": "The \"trim()\" method removes whitespace from both ends of a string. Whitespace in this context is all the whitespace characters (space, tab, no-break space, etc.) and all the line terminator characters (LF, CR, etc.)."
  },
  "StringTrimEnd": {
    "prefix": ".trimEnd",
    "body": ".trimEnd()",
    "description": "The \"trimEnd()\" method removes whitespace from the end of a string. trimRight() is an alias of this method."
  },
  "StringTrimStart": {
    "prefix": ".trimStart",
    "body": ".trimStart()",
    "description": "The \"trimStart()\" method removes whitespace from the beginning of a string. trimLeft() is an alias of this method."
  },
  "StringRaw": {
    "prefix": "Sr",
    "body": "String.raw${1:(${2:callSite}, ${0:substitutions})}",
    "description": "The \"trimStart()\" method removes whitespace from the beginning of a string. trimLeft() is an alias of this method."
  },
  "NumberIsFinite": {
    "prefix": "Nif",
    "body": "Number.isFinite(${0:number})",
    "description": "The \"Number.isFinite()\" method determines whether the passed value is a finite number."
  },
  "NumberIsInteger": {
    "prefix": "Nii",
    "body": "Number.isInteger(${0:number})",
    "description": "The \"Number.isInteger()\" method determines whether the passed value is an integer."
  },
  "NumberIsNaN": {
    "prefix": "Nin",
    "body": "Number.isNaN(${0:number})",
    "description": "The \"Number.isNaN()\" method determines whether the passed value is NaN and its type is Number. It is a more robust version of the original, global isNaN()."
  },
  "NumberIsSafeInteger": {
    "prefix": "Nisi",
    "body": "Number.isSafeInteger(${0:number})",
    "description": "The \"Number.isSafeInteger()\" method determines whether the provided value is a number that is a safe integer."
  },
  "NumberParseFloat": {
    "prefix": "Npf",
    "body": "Number.parseFloat(${0:string})",
    "description": "The \"Number.parseFloat()\" method parses a string argument and returns a floating point number."
  },
  "NumberParseInt": {
    "prefix": "Npi",
    "body": "Number.parseInt(${1:string}${2:, ${0:radix}})",
    "description": "The \"Number.parseInt()\" method parses a string argument and returns an integer of the specified radix or base."
  },
  "NumberToExponential": {
    "prefix": ".toExponential",
    "body": ".toExponential(${0:fractionDigits})",
    "description": "The \"toExponential()\" method returns a string representing the Number object in exponential notation."
  },
  "NumberToFixed": {
    "prefix": ".toFixed",
    "body": ".toFixed(${0:fractionDigits})",
    "description": "The \"toFixed()\" method formats a number using fixed-point notation."
  },
  "NumberToLocaleString": {
    "prefix": ".toLocaleString",
    "body": ".toLocaleString(${1:${2:locales}${3:, {$0\\}}})",
    "description": "The \"toLocaleString()\" method returns a string with a language-sensitive representation of this number."
  },
  "NumberToPrecision": {
    "prefix": ".toPrecision",
    "body": ".toPrecision(${0:precision})",
    "description": "The \"toPrecision()\" method formats a number using fixed-point notation."
  },
  "FunctionApply": {
    "prefix": ".apply",
    "body": ".apply(${1:this}${2:, ${0:args}})",
    "description": "The \"apply()\" method calls a function with a given \"this\" value, and \"arguments\" provided as an array (or an array-like object)."
  },
  "FunctionBind": {
    "prefix": ".bind",
    "body": ".bind(${1:this}${2:, ${0:args}})",
    "description": "The \"bind()\" method creates a new function that, when called, has its this keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called."
  },
  "FunctionCall": {
    "prefix": ".call",
    "body": ".call(${1:this}${2:, ${0:args}})",
    "description": "The \"call()\" method calls a function with a given this value and arguments provided individually."
  },
  "DateUTC": {
    "prefix": "Du",
    "body": "Date.UTC(${1:year}, ${2:month}${3:, ${4:day}${5:, ${6:hours}${7:, ${8:minutes}${9:, ${10:seconds}${11:, ${0:ms}}}}}})",
    "description": "The \"Date.UTC()\" method accepts parameters similar to the Date constructor, but treats them as UTC. It returns the number of milliseconds since January 1, 1970, 00:00:00 UTC."
  },
  "DateNow": {
    "prefix": "Dn",
    "body": "Date.now()",
    "description": "The \"Date.UnowTC()\" method returns the number of milliseconds elapsed since January 1, 1970 00:00:00 UTC."
  },
  "DateParse": {
    "prefix": "Dp",
    "body": "Date.parse(${0:dateString})",
    "description": "The \"Date.UnowTC()\" method parses a string representation of a date, and returns the number of milliseconds since January 1, 1970, 00:00:00 UTC or NaN if the string is unrecognized or, in some cases, contains illegal date values (e.g. 2015-02-31)."
  },
  "DateGetDate": {
    "prefix": ".getDate",
    "body": ".getDate()",
    "description": "The \"getDate()\" method returns the day of the month for the specified date according to local time."
  },
  "DateGetDay": {
    "prefix": ".getDay",
    "body": ".getDay()",
    "description": "The \"getDay()\" method returns the day of the week for the specified date according to local time, where 0 represents Sunday."
  },
  "DateGetFullYear": {
    "prefix": ".getFullYear",
    "body": ".getFullYear()",
    "description": "The \"getFullYear()\" method returns the year of the specified date according to local time."
  },
  "DateGetFullHours": {
    "prefix": ".getHours",
    "body": ".getHours()",
    "description": "The \"getHours()\" method returns the hour for the specified date, according to local time."
  },
  "DateGetMilliseconds": {
    "prefix": ".getMilliseconds",
    "body": ".getMilliseconds()",
    "description": "The \"getMilliseconds()\" method returns the milliseconds in the specified date according to local time."
  },
  "DateGetMinutes": {
    "prefix": ".getMinutes",
    "body": ".getMinutes()",
    "description": "The \"getMinutes()\" method returns the minutes in the specified date according to local time."
  },
  "DateGetMonth": {
    "prefix": ".getMonth",
    "body": ".getMonth()",
    "description": "The \"getMonth()\" method returns the month in the specified date according to local time, as a zero-based value (where zero indicates the first month of the year)."
  },
  "DateGetSeconds": {
    "prefix": ".getSeconds",
    "body": ".getSeconds()",
    "description": "The \"getSeconds()\" method returns the seconds in the specified date according to local time."
  },
  "DateGetTime": {
    "prefix": ".getTime",
    "body": ".getTime()",
    "description": "The \"getTime()\" method returns the number of milliseconds* since the Unix Epoch."
  },
  "DateGetTimezoneOffset": {
    "prefix": ".getTimezoneOffset",
    "body": ".getTimezoneOffset()",
    "description": "The \"getTimezoneOffset()\" method returns the time zone difference, in minutes, from current locale (host system settings) to UTC."
  },
  "DateGetUTCDate": {
    "prefix": ".getUTCDate",
    "body": ".getUTCDate()",
    "description": "The \"getUTCDate()\" method returns the day (date) of the month in the specified date according to universal time."
  },
  "DateGetUTCDay": {
    "prefix": ".getUTCDay",
    "body": ".getUTCDay()",
    "description": "The \"getUTCDay()\" method returns the day of the week in the specified date according to universal time, where 0 represents Sunday."
  },
  "DateGetUTCFullYear": {
    "prefix": ".getUTCFullYear",
    "body": ".getUTCFullYear()",
    "description": "The \"getUTCFullYear()\" method returns the year in the specified date according to universal time."
  },
  "DateGetUTCHours": {
    "prefix": ".getUTCHours",
    "body": ".getUTCHours()",
    "description": "The \"getUTCHours()\" method returns the hours in the specified date according to universal time."
  },
  "DateGetUTCMilliseconds": {
    "prefix": ".getUTCMilliseconds",
    "body": ".getUTCMilliseconds()",
    "description": "The \"getUTCMilliseconds()\" method returns the milliseconds portion of the time object's value."
  },
  "DateGetUTCMinutes": {
    "prefix": ".getUTCMinutes",
    "body": ".getUTCMinutes()",
    "description": "The \"getUTCMinutes()\" method returns the minutes in the specified date according to universal time."
  },
  "DateGetUTCMonth": {
    "prefix": ".getUTCMonth",
    "body": ".getUTCMonth()",
    "description": "The \"getUTCMonth()\" method the month of the specified date according to universal time, as a zero-based value (where zero indicates the first month of the year)."
  },
  "DateGetUTCSeconds": {
    "prefix": ".getUTCSeconds",
    "body": ".getUTCSeconds()",
    "description": "The \"getUTCSeconds()\" method returns the seconds in the specified date according to universal time."
  },
  "DateSetDate": {
    "prefix": ".setDate",
    "body": ".setDate(${0:date})",
    "description": "The \"setDate()\" method sets the day of the Date object relative to the beginning of the currently set month."
  },
  "DateSetFullYear": {
    "prefix": ".setFullYear",
    "body": ".setFullYear(${1:year}${2:, ${3:month}${4:, ${0:day}}})",
    "description": "The \"setFullYear()\" method sets the full year for a specified date according to local time. Returns new timestamp."
  },
  "DateSetHours": {
    "prefix": ".setHours",
    "body": ".setHours(${1:hours}${2:, ${3:minutes}${4:, ${5:seconds}${6:, ${0:milliseconds}}}})",
    "description": "The \"setHours()\" method sets the hours for a specified date according to local time, and returns the number of milliseconds since January 1, 1970 00:00:00 UTC until the time represented by the updated Date instance."
  },
  "DateSetMilliseconds": {
    "prefix": ".setMilliseconds",
    "body": ".setMilliseconds(${0:})",
    "description": "The \"setMilliseconds(milliseconds)\" method sets the milliseconds for a specified date according to local time."
  },
  "DateSetMinutes": {
    "prefix": ".setMinutes",
    "body": ".setMinutes(${1:minutes}${2:, ${3:seconds}${4:, ${0:milliseconds}}})",
    "description": "The \"setMinutes()\" method sets the minutes for a specified date according to local time."
  },
  "DateSetMonth": {
    "prefix": ".setMonth",
    "body": ".setMonth(${1:month}${2:, ${0:date}})",
    "description": "The \"setMonth()\" method sets the month for a specified date according to the currently set year."
  },
  "DateSetSeconds": {
    "prefix": ".setSeconds",
    "body": ".setSeconds(${1:seconds}${2:, ${0:milliseconds}})",
    "description": "The \"setSeconds()\" method sets the seconds for a specified date according to local time."
  },
  "DateSetTime": {
    "prefix": ".setTime",
    "body": ".setTime(${0:time})",
    "description": "The \"setTime()\" method sets the Date object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC."
  },
  "DateSetUTCDate": {
    "prefix": ".setUTCDate",
    "body": ".setUTCDate(${0:date})",
    "description": "The \"setUTCDate()\" method sets the day of the month for a specified date according to universal time."
  },
  "DateSetUTCFullYear": {
    "prefix": ".setUTCFullYear",
    "body": ".setUTCFullYear(${1:year}${2:, ${3:month}${4:, ${0:date}}})",
    "description": "The \"setUTCFullYear()\" method sets the full year for a specified date according to universal time."
  },
  "DateSetUTCHours": {
    "prefix": ".setUTCHours",
    "body": ".setUTCHours(${1:hours}${2:, ${3:minutes}${4:, ${5:seconds}${6:, ${0:milliseconds}}}})",
    "description": "The \"setUTCHours()\" method sets the hour for a specified date according to universal time, and returns the number of milliseconds since  January 1, 1970 00:00:00 UTC until the time represented by the updated Date instance."
  },
  "DateSetUTCMilliseconds": {
    "prefix": ".setUTCMilliseconds",
    "body": ".setUTCMilliseconds(${0:})",
    "description": "The \"setUTCMilliseconds(milliseconds)\" method sets the milliseconds for a specified date according to universal time."
  },
  "DateSetUTCMinutes": {
    "prefix": ".setUTCMinutes",
    "body": ".setUTCMinutes(${1:minutes}${2:, ${3:seconds}${4:, ${0:milliseconds}}})",
    "description": "The \"setUTCMinutes()\" method sets the minutes for a specified date according to universal time."
  },
  "DateSetUTCMonth": {
    "prefix": ".setUTCMonth",
    "body": ".setUTCMonth(${1:month}${2:, ${0:date}})",
    "description": "The \"setUTCMonth()\" method sets the month for a specified date according to universal time."
  },
  "DateSetUTCSeconds": {
    "prefix": ".setUTCSeconds",
    "body": ".setUTCSeconds(${1:seconds}${2:, ${0:milliseconds}})",
    "description": "The \"setUTCSeconds()\" method sets the seconds for a specified date according to universal time."
  },
  "DateToDateString": {
    "prefix": ".toDateString",
    "body": ".toDateString()",
    "description": "The \"toDateString()\" method returns the date portion of a Date object in English in the following format separated by spaces:\n\n1. First three letters of the week day name\n\t2. First three letters of the month name\n\t3. Two digit day of the month, padded on the left a zero if necessary\n\t4. Four digit year (at least), padded on the left with zeros if necessary\n\nE.g. \"Thu Jan 01 1970\"."
  },
  "DateToISOString": {
    "prefix": ".toISOString",
    "body": ".toISOString()",
    "description": "The \"toISOString()\" method returns a string in simplified extended ISO format (ISO 8601), which is always 24 or 27 characters long (\"YYYY-MM-DDTHH:mm:ss.sssZ\" or \"±YYYYYY-MM-DDTHH:mm:ss.sssZ\", respectively). The timezone is always zero UTC offset, as denoted by the suffix \"Z\"."
  },
  "DateToJSON": {
    "prefix": ".toJSON",
    "body": ".toJSON()",
    "description": "The \"toJSON()\" method returns a string representation of the Date object."
  },
  "DateToLocaleDateString": {
    "prefix": ".toLocaleDateString",
    "body": ".toLocaleDateString(${1:${2:locales}${3:, {$0\\}}})",
    "description": "The \"toLocaleDateString()\" method returns a string with a language sensitive representation of the date portion of this date. The new locales and options arguments let applications specify the language whose formatting conventions should be used and allow to customize the behavior of the function. In older implementations, which ignore the locales and options arguments, the locale used and the form of the string returned are entirely implementation dependent."
  },
  "DateToLocaleString": {
    "prefix": ".toLocaleString",
    "body": ".toLocaleString(${1:${2:locales}${3:, {$0\\}}})",
    "description": "The \"toLocaleString()\" method returns a string with a language sensitive representation of this date. The new locales and options arguments let applications specify the language whose formatting conventions should be used and customize the behavior of the function. In older implementations, which ignore the locales and options arguments, the locale used and the form of the string returned are entirely implementation dependent."
  },
  "DateToLocaleTimeString": {
    "prefix": ".toLocaleTimeString",
    "body": ".toLocaleTimeString(${1:${2:locales}${3:, {$0\\}}})",
    "description": "The \"toLocaleTimeString()\" method returns a string with a language sensitive representation of the time portion of this date. The new locales and options arguments let applications specify the language whose formatting conventions should be used and customize the behavior of the function. In older implementations, which ignore the locales and options arguments, the locale used and the form of the string returned are entirely implementation dependent."
  },
  "DateToTimeString": {
    "prefix": ".toTimeString",
    "body": ".toTimeString()",
    "description": "The \"toTimeString()\" method returns the time portion of a Date object in human readable form in American English."
  },
  "DateToUTCString": {
    "prefix": ".toUTCString",
    "body": ".toUTCString()",
    "description": "The \"toUTCString()\" method returns the time portion of a Date object in human readable form in American English."
  },
  "MathAbs": {
    "prefix": "Ma",
    "body": "Math.abs(${0:x})",
    "description": "The \"Math.abs()\" function returns the absolute value of a number"
  },
  "MathAcos": {
    "prefix": "Macs",
    "body": "Math.acos(${0:x})",
    "description": "The \"Math.acos()\" function returns the arccosine (in radians) of a number"
  },
  "MathAcosh": {
    "prefix": "Macsh",
    "body": "Math.acosh(${0:x})",
    "description": "The \"Math.acosh()\" function returns the hyperbolic arc-cosine of a number"
  },
  "MathAsin": {
    "prefix": "Mas",
    "body": "Math.asin(${0:x})",
    "description": "The \"Math.asin()\" function returns the arcsine (in radians) of a number"
  },
  "MathAsinh": {
    "prefix": "Mash",
    "body": "Math.asinh(${0:x})",
    "description": "The \"Math.asinh()\" function returns the hyperbolic arcsine of a number"
  },
  "MathAtan": {
    "prefix": "Mat",
    "body": "Math.atan(${0:x})",
    "description": "The \"Math.atan()\" function returns the arctangent (in radians) of a number"
  },
  "MathAtan2": {
    "prefix": "Mat2",
    "body": "Math.atan2(${1:y}, ${0:x})",
    "description": "The \"Math.atan2()\" function returns the angle in the plane (in radians) between the positive x-axis and the ray from (0,0) to the point (x,y), for Math.atan2(y,x)."
  },
  "MathAtanh": {
    "prefix": "Math",
    "body": "Math.atanh(${0:x})",
    "description": "The \"Math.atanh()\" function returns the hyperbolic arctangent of a number"
  },
  "MathCbrt": {
    "prefix": "Mcb",
    "body": "Math.cbrt(${0:x})",
    "description": "The \"Math.cbrt()\" function returns the cube root of a number"
  },
  "MathCeil": {
    "prefix": "Mceil",
    "body": "Math.ceil(${0:x})",
    "description": "The \"Math.ceil()\" function always rounds a number up to the next largest whole number or integer."
  },
  "MathClz32": {
    "prefix": "Mclz",
    "body": "Math.clz32(${0:x})",
    "description": "The \"Math.clz32()\" function returns the number of leading zero bits in the 32-bit binary representation of a number."
  },
  "MathCos": {
    "prefix": "Mcos",
    "body": "Math.cos(${0:x})",
    "description": "The \"Math.cos()\" static function returns the cosine of the specified angle, which must be specified in radians"
  },
  "MathCosh": {
    "prefix": "Mcosh",
    "body": "Math.cosh(${0:x})",
    "description": "The \"Math.cosh()\" function the hyperbolic cosine of a number"
  },
  "MathExp": {
    "prefix": "Mexp",
    "body": "Math.exp(${0:x})",
    "description": "The \"Math.exp()\" function returns e^x, where x is the argument, and e is Euler's number (also known as Napier's constant), the base of the natural logarithms."
  },
  "MathExpm1": {
    "prefix": "Mexpm1",
    "body": "Math.expm1(${0:x})",
    "description": "The \"Math.expm1()\" function returns \"e^x - 1\", where x is the argument, and e the base of the natural logarithms."
  },
  "MathFloor": {
    "prefix": "Mfl",
    "body": "Math.floor(${0:x})",
    "description": "The \"Math.floor()\" function returns the largest integer less than or equal to a given number."
  },
  "MathFround": {
    "prefix": "Mfr",
    "body": "Math.fround(${0:x})",
    "description": "The \"Math.fround()\" function returns the nearest 32-bit single precision float representation of a Number."
  },
  "MathHypot": {
    "prefix": "Mhypot",
    "body": "Math.hypot(${0:numbers})",
    "description": "The \"Math.hypot()\" function returns the square root of the sum of squares of its arguments"
  },
  "MathImul": {
    "prefix": "Mim",
    "body": "Math.imul(${1:a}, ${0:b})",
    "description": "The \"Math.imul()\" function returns the result of the C-like 32-bit multiplication of the two parameters."
  },
  "MathLog": {
    "prefix": "Mlg",
    "body": "Math.log(${0:x})",
    "description": "The \"Math.log()\" function returns the natural logarithm (base e) of a number"
  },
  "MathLog10": {
    "prefix": "Mlg10",
    "body": "Math.log10(${0:x})",
    "description": "The \"Math.log10()\" function returns the base 10 logarithm of a number"
  },
  "MathLog1p": {
    "prefix": "Mlg1p",
    "body": "Math.log1p(${0:x})",
    "description": "The \"Math.log1p()\" function returns the absolute value of a number"
  },
  "MathLog2": {
    "prefix": "Mlg2",
    "body": "Math.log2(${0:x})",
    "description": "The \"Math.log2()\" function returns the base 2 logarithm of a number"
  },
  "MathMax": {
    "prefix": "Mmax",
    "body": "Math.max(${0:values})",
    "description": "The \"Math.max()\" function the largest of zero or more numbers."
  },
  "MathMin": {
    "prefix": "Mmin",
    "body": "Math.min(${0:values})",
    "description": "The \"Math.min()\" function returns the absolute value of a number"
  },
  "MathPow": {
    "prefix": "Mp",
    "body": "Math.pow(${1:base}, ${0:exponent})",
    "description": "The \"Math.pow()\" function returns the base to the exponent power, that is, base^exponent."
  },
  "MathRandom": {
    "prefix": "Mrdm",
    "body": "Math.random()",
    "description": "The \"Math.random()\" function eturns a floating-point, pseudo-random number in the range 0–1 (inclusive of 0, but not 1) with approximately uniform distribution over that range — which you can then scale to your desired range. The implementation selects the initial seed to the random number generation algorithm; it cannot be chosen or reset by the user."
  },
  "MathRound": {
    "prefix": "Mrd",
    "body": "Math.round(${0:x})",
    "description": "The \"Math.round()\" function returns the value of a number rounded to the nearest integer."
  },
  "MathSign": {
    "prefix": "Msign",
    "body": "Math.sign(${0:x})",
    "description": "The \"Math.sign()\" function returns the sign of a number, indicating whether the number is positive, negative or zero."
  },
  "MathSin": {
    "prefix": "Msin",
    "body": "Math.sin(${0:x})",
    "description": "The \"Math.sin()\" function returns the sine of a number."
  },
  "MathSinh": {
    "prefix": "Msinh",
    "body": "Math.sinh(${0:x})",
    "description": "The \"Math.sinh()\" function returns the hyperbolic sine of a number"
  },
  "MathSqrt": {
    "prefix": "Msqrt",
    "body": "Math.sqrt(${0:x})",
    "description": "The \"Math.sqrt()\" function returns the square root of a number,"
  },
  "MathTan": {
    "prefix": "Mtan",
    "body": "Math.tan(${0:x})",
    "description": "The \"Math.tan()\" function returns the tangent of a number."
  },
  "MathTanh": {
    "prefix": "Mtanh",
    "body": "Math.tanh(${0:x})",
    "description": "The \"Math.tan()\" function returns the hyperbolic tangent of a number"
  },
  "MathTrunc": {
    "prefix": "Mtrunc",
    "body": "Math.trunc(${0:x})",
    "description": "The \"Math.trunc()\" function returns the integer part of a number by removing any fractional digits."
  },
  "RegExpExec": {
    "prefix": ".exec",
    "body": ".exec(${0:string})",
    "description": "The \"exec()\" method executes a search for a match in a specified string. Returns a result array, or null."
  },
  "RegExpTest": {
    "prefix": ".test",
    "body": ".test(${0:string})",
    "description": "The \"test()\" method executes a search for a match between a regular expression and a specified string. Returns true or false."
  },
  "JSONParse": {
    "prefix": "Jp",
    "body": "JSON.parse(${1:text}${2:, ${0:reviver}})",
    "description": "The \"JSON.parse()\" method parses a JSON string, constructing the JavaScript value or object described by the string. An optional reviver function can be provided to perform a transformation on the resulting object before it is returned."
  },
  "JSONStringify": {
    "prefix": "Js",
    "body": "JSON.stringify(${1:value}${2:, ${3:replacer}${4:, ${0:space}}})",
    "description": "The \"JSON.stringify()\" method converts a JavaScript object or value to a JSON string, optionally replacing values if a replacer function is specified or optionally including only the specified properties if a replacer array is specified."
  },
  "Class": {
    "prefix": "cls",
    "body": ["class ${1:Name} {", "\t$0", "}"],
    "description": "Create a class."
  },
  "ClassExtend": {
    "prefix": "clsx",
    "body": [
      "class ${1:Name} extends ${2:BaseClass} {",
      "\tconstructor(${3:arguments}) {",
      "\t\tsuper($3)",
      "\t\t$0",
      "\t}",
      "}"
    ],
    "description": "Create a class that extended base class."
  },
  "Constructor": {
    "prefix": "cstr",
    "body": [
      "constructor(${1:arguments}) {",
      "${2:\tsuper(${1})}",
      "\t$0",
      "}"
    ],
    "description": "Constructor"
  },
  "Export": {
    "prefix": "ep",
    "body": "export ${0:member}",
    "description": "Export individual features"
  },
  "ExportList": {
    "prefix": "epl",
    "body": "export { ${0:names} \\}",
    "description": "Export list"
  },
  "ExportDefault": {
    "prefix": "epd",
    "body": "export default ${1:member}",
    "description": "Export default module"
  },
  "ExportAggregating": {
    "prefix": "epf",
    "body": "export ${0:*} from '$1'",
    "description": "Export aggregating modules"
  },
  "Import": {
    "prefix": "ip",
    "body": "import '$0'",
    "description": "Import a module for its side effects only"
  },
  "ImportDefault": {
    "prefix": "ipd",
    "body": "import ${0:moduleName} from '$1'",
    "description": "Importing defaults"
  },
  "ImportEntireModule": {
    "prefix": "ipem",
    "body": "import * as ${0:moduleName} from '$1'",
    "description": "Import an entire module's contents"
  },
  "ImportMultipleExports": {
    "prefix": "ipme",
    "body": "import { $0 } from '$1'",
    "description": "Import multiple exports from module"
  },
  "ImportDynamic": {
    "prefix": "ipdn",
    "body": ["import('$1').then((${2:module}) => {", "\t$0", "})"],
    "description": "Dynamic Imports"
  },
  "Return": {
    "prefix": "r",
    "body": "return $0",
    "description": "return"
  },
  "ReturnThis": {
    "prefix": "rth",
    "body": "return this",
    "description": "return this"
  },
  "ReturnNull": {
    "prefix": "rn",
    "body": "return null",
    "description": "return null"
  },
  "ReturnTrue": {
    "prefix": "rt",
    "body": "return true",
    "description": "return true"
  },
  "ReturnFalse": {
    "prefix": "rf",
    "body": "return false",
    "description": "return false"
  },
  "ReturnPromise": {
    "prefix": "rp",
    "body": ["return new Promise((resolve, reject) => {", "\t$0", "})"],
    "description": "return new promise"
  },
  "ReturnPromiseReject": {
    "prefix": "rpj",
    "body": "return Promise.reject($0)",
    "description": "return Promise.reject"
  },
  "ReturnPromiseResolve": {
    "prefix": "rps",
    "body": "return Promise.resolve($0)",
    "description": "return Promise.resolve"
  },
  "NewPromise": {
    "prefix": "np",
    "body": ["new Promise((resolve, reject) => {", "\t$0", "})"],
    "description": "New Promise"
  },
  "Then": {
    "prefix": ".then",
    "body": [".then((${2:value}) => {", "\t$0", "})"],
    "description": "Promise.then"
  },
  "Catch": {
    "prefix": ".catch",
    "body": [".catch((${2:value}) => {", "\t$0", "})"],
    "description": "Promise.catch"
  },
  "VarStatement": {
    "prefix": "v",
    "body": "var ${0:name}",
    "description": "var statement"
  },
  "VarAssignment": {
    "prefix": "v=",
    "body": "var ${1:name} = ${0:value}",
    "description": "var assignment"
  },
  "LetStatement": {
    "prefix": "l",
    "body": "let ${1:name}",
    "description": "let statement"
  },
  "LetAssignment": {
    "prefix": "l=",
    "body": "let ${1:name} = ${2:value}",
    "description": "let assignment"
  },
  "ConstStatement": {
    "prefix": "co",
    "body": "const ${0:name}",
    "description": "const statement"
  },
  "ConstAssignment": {
    "prefix": "co=",
    "body": "const ${2:name} = ${1:value}",
    "description": "const assignment"
  },
  "TernaryOperator": {
    "prefix": "to",
    "body": "${1:condition} ? ${2:value1} : ${3:value2}"
  },
  "ElseStatement": {
    "prefix": "el",
    "body": ["else {", "\t$0", "}"],
    "description": "else statement"
  },
  "ElseIfStatement": {
    "prefix": "ei",
    "body": ["else if (${1:condition}) {", "\t$0", "}"],
    "description": "else if statement"
  },
  "ForLoop": {
    "prefix": "fl",
    "body": [
      "for (let ${1:i} = 0, ${2:len} = ${3:iterable}.length; $1 < $2; $1++) {",
      "\t$0",
      "}"
    ],
    "description": "for loop"
  },
  "ForInLoop": {
    "prefix": "fi",
    "body": [
      "for (let ${1:key} in ${2:source}) {",
      "\tif (Object.hasOwnProperty.call(${2:source}, ${1:key})) {",
      "\t\t$0",
      "\t}",
      "}"
    ],
    "description": "for in loop"
  },
  "ForOfLoop": {
    "prefix": "fo",
    "body": ["for (const ${2:key} of ${1:source}) {", "\t$0", "}"],
    "description": "for of loop"
  },
  "whileLoop": {
    "prefix": "wl",
    "body": ["while (${1:condition}) {", "\t$0", "}"],
    "description": "while loop"
  },
  "try/catch": {
    "prefix": "tc",
    "body": ["try {", "\t$0", "} catch (${1:err}) {", "\t", "}"],
    "description": "try/catch"
  },
  "TryFinally": {
    "prefix": "tf",
    "body": ["try {", "\t$0", "} finally {", "\t", "}"],
    "description": "try/finally"
  },
  "TryCatchFinally": {
    "prefix": "tcf",
    "body": [
      "try {",
      "\t$0",
      "} catch (${1:err}) {",
      "\t",
      "} finally {",
      "\t",
      "}"
    ],
    "description": "try/catch/finally"
  },
  "SwitchCase": {
    "prefix": "sw",
    "body": [
      "switch (${1:expr}) {",
      "\tcase ${2:value}:",
      "\t\treturn $0",
      "\tdefault:",
      "\t\treturn",
      "}"
    ],
    "description": "switch case"
  },
  "ArrowFunction": {
    "prefix": "af",
    "body": ["(${1:arguments}) => ${2:statement}"],
    "description": "arrow function"
  },
  "ArrowFunctionWithBody": {
    "prefix": "afb",
    "body": ["(${1:arguments}) => {", "\t$0", "}"],
    "description": "arrow function with body"
  },
  "AnonymousFunction": {
    "prefix": "f",
    "body": ["function(${1:arguments}) {$0}"],
    "description": "anonymous function"
  },
  "NamedFunction": {
    "prefix": "fn",
    "body": ["function ${1:name}(${2:arguments}) {", "\t$0", "}"],
    "description": "named function"
  },
  "ImmediatelyInvokedFunctionExpression": {
    "prefix": "iife",
    "body": ["(function(${1:arguments}) {", "\t$0", "})($2)"],
    "description": "immediately-invoked function expression"
  },
  "Generator": {
    "prefix": "gf",
    "body": ["function* (${1:arguments}) {", "\t$0", "}"],
    "description": "generator"
  },
  "NamedGenerator": {
    "prefix": "gfn",
    "body": ["function* ${1:name}(${2:arguments}) {", "\t$0", "}"],
    "description": "named generator"
  },
  "UseStrict": {
    "prefix": "us",
    "body": "'use strict'",
    "description": "use strict"
  },
  "Require": {
    "prefix": "re",
    "body": "require('${0:module}')",
    "description": "require"
  },
  "ExportsMember": {
    "prefix": "eps",
    "body": "exports.${1:member} = ${0:value}",
    "description": "exports.member"
  },
  "ModuleExports": {
    "prefix": "meps",
    "body": "module.exports = ${0:name}",
    "description": "module.exports"
  },
  "SetTimeout": {
    "prefix": "st",
    "body": ["setTimeout(() => {", "\t$0", "}, ${1:delay})"],
    "description": "SetTimeout"
  },
  "SetInterval": {
    "prefix": "si",
    "body": ["setInterval(() => {", "\t$0", "}, ${1:delay})"],
    "description": "setInterval"
  },
  "SetImmediate": {
    "prefix": "sim",
    "body": ["setImmediate(() => {", "\t$0", "})"],
    "description": "setImmediate"
  },
  "String": {
    "prefix": "S",
    "body": "String",
    "description": "String"
  },
  "Number": {
    "prefix": "N",
    "body": "Number",
    "description": "Number"
  },
  "Array": {
    "prefix": "A",
    "body": "Array",
    "description": "Array"
  },
  "Date": {
    "prefix": "D",
    "body": "Date",
    "description": "Date"
  },
  "RegExp": {
    "prefix": "Rx",
    "body": "RegExp",
    "description": "RegExp"
  },
  "Math": {
    "prefix": "M",
    "body": "Math",
    "description": "Math"
  },
  "TypeOf": {
    "prefix": "tof",
    "body": "typeof ${1:source} ${2|===,!==|} '${3|undefined,object,boolean,number,bigint,string,symbol,function,object|}'",
    "description": "Type of"
  },
  "InstanceOf": {
    "prefix": "iof",
    "body": "${1:source} instanceof ${0:Object}",
    "description": "Instance of"
  },
  "AddEventListener": {
    "prefix": ".addEventListener",
    "body": ".addEventListener('${1:type}', ${2:listener}${3:, ${4:options}})",
    "description": "The EventTarget method \"addEventListener()\" sets up a function that will be called whenever the specified event is delivered to the target. Common targets are Element, Document, and Window, but the target may be any object that supports events (such as XMLHttpRequest)."
  },
  "RemoveEventListener": {
    "prefix": ".removeEventListener",
    "body": ".removeEventListener('${1:type}', ${2:listener}${3:, ${4:options}})",
    "description": "The EventTarget.removeEventListener() method removes from the EventTarget an event listener previously registered with EventTarget.addEventListener(). The event listener to be removed is identified using a combination of the event type, the event listener function itself, and various optional options that may affect the matching process; see Matching event listeners for removal"
  },
  "GetElementById ": {
    "prefix": "gei",
    "body": "document.getElementById('#${0:id}')",
    "description": "The Document method getElementById() returns an Element object representing the element whose id property matches the specified string. Since element IDs are required to be unique if specified, they're a useful way to get access to a specific element quickly."
  },
  "GetElementsByClassName ": {
    "prefix": "gec",
    "body": "${1:document}.getElementsByClassName('${0:className}')",
    "description": "The Element method getElementsByClassName() returns a live HTMLCollection which contains every descendant element which has the specified class name or names.\n\nThe method getElementsByClassName() on the Document interface works essentially the same way, except it acts on the entire document, starting at the document root."
  },
  "GetElementsByTagName ": {
    "prefix": "get",
    "body": "${1:document}.getElementsByTagName('${2:tag}')",
    "description": "The Element.getElementsByTagName() method returns a live HTMLCollection of elements with the given tag name. All descendants of the specified element are searched, but not the element itself. The returned list is live, which means it updates itself with the DOM tree automatically. Therefore, there is no need to call Element.getElementsByTagName() with the same element and arguments repeatedly if the DOM changes in between calls."
  },
  "QuerySelector ": {
    "prefix": "qs",
    "body": ["${1:document}.querySelector('${2:selector}')"],
    "description": "The querySelector() method of the Element interface returns the first element that is a descendant of the element on which it is invoked that matches the specified group of selectors."
  },
  "QuerySelectorAll ": {
    "prefix": "qsa",
    "body": "${1:document}.querySelectorAll('${2:selector}')",
    "description": "The Element method querySelectorAll() returns a static (not live) NodeList representing a list of elements matching the specified group of selectors which are descendants of the element on which the method was called."
  },
  "Key/Value": {
    "prefix": "kv",
    "body": "${1:key}: ${0:value}",
    "description": "key value pair"
  },
  "EslintDisableAll": {
    "prefix": "elda",
    "body": "/* eslint-disable */",
    "description": "Disable all rules for the rest of the file"
  },
  "EslintEnableAll": {
    "prefix": "elea",
    "body": "/* eslint-enable */",
    "description": "Enable all rules for the rest of the file"
  },
  "EslintDisableRules": {
    "prefix": "eldr",
    "body": "/* eslint-disable ${0:rule} */",
    "description": "Disable the listed rules for the rest of the file"
  },
  "EslintEnableRules": {
    "prefix": "eler",
    "body": "/* eslint-enable ${0:rule} */",
    "description": "Enable the listed rules for the rest of the file"
  },
  "EslintDisableLine": {
    "prefix": "eldl",
    "body": "// eslint-disable-line",
    "description": "Disables all rules for the current line"
  },
  "EslintEnableLine": {
    "prefix": "elel",
    "body": "// eslint-enable-line",
    "description": "Enables all rules for the current line"
  },
  "EslintDisableLineRules": {
    "prefix": "eldlr",
    "body": "// eslint-disable-line ${0:rule}",
    "description": "Disables the listed rules for the current line"
  },
  "EslintEnableLineRules": {
    "prefix": "elelr",
    "body": "// eslint-enable-line ${0:rule}",
    "description": "Enables the listed rules for the current line"
  },
  "EslintDisableNextLine": {
    "prefix": "eldnl",
    "body": "// eslint-disable-next-line",
    "description": "Disables all rules for the following line"
  },
  "EslintEnableNextLine": {
    "prefix": "elenl",
    "body": "// eslint-enable-next-line",
    "description": "Enables all rules for the following line"
  },
  "EslintDisableNextLineRules": {
    "prefix": "eldnlr",
    "body": "// eslint-disable-next-line ${0:rule}",
    "description": "Disables the listed rules for the following line"
  },
  "EslintEnableNextLineRules": {
    "prefix": "elenlr",
    "body": "// eslint-enable-next-line ${0:rule}",
    "description": "Enables the listed rules for the following line"
  },
  "Jest Describe": {
    "prefix": "dsc",
    "body": ["describe('${1:describe}', () => {", "\t$0", "})"],
    "description": "Creates a block that groups together several related tests in one 'test suite'"
  },
  "Jest It": {
    "prefix": "it",
    "body": ["it('${1:describe}', () => {", "\t$0", "}${2:, ${3:timeout}})"],
    "description": "creates a test suite"
  }
}
